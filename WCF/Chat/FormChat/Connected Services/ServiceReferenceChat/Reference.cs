//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FormChat.ServiceReferenceChat {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Message", Namespace="http://schemas.datacontract.org/2004/07/Chat")]
    [System.SerializableAttribute()]
    public partial class Message : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FromField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimestampField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ToField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string From {
            get {
                return this.FromField;
            }
            set {
                if ((object.ReferenceEquals(this.FromField, value) != true)) {
                    this.FromField = value;
                    this.RaisePropertyChanged("From");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text {
            get {
                return this.TextField;
            }
            set {
                if ((object.ReferenceEquals(this.TextField, value) != true)) {
                    this.TextField = value;
                    this.RaisePropertyChanged("Text");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Timestamp {
            get {
                return this.TimestampField;
            }
            set {
                if ((this.TimestampField.Equals(value) != true)) {
                    this.TimestampField = value;
                    this.RaisePropertyChanged("Timestamp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string To {
            get {
                return this.ToField;
            }
            set {
                if ((object.ReferenceEquals(this.ToField, value) != true)) {
                    this.ToField = value;
                    this.RaisePropertyChanged("To");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReferenceChat.IChat", CallbackContract=typeof(FormChat.ServiceReferenceChat.IChatCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IChat {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/register", ReplyAction="http://tempuri.org/IChat/registerResponse")]
        void register(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/register", ReplyAction="http://tempuri.org/IChat/registerResponse")]
        System.Threading.Tasks.Task registerAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/Send", ReplyAction="http://tempuri.org/IChat/SendResponse")]
        void Send(FormChat.ServiceReferenceChat.Message m);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/Send", ReplyAction="http://tempuri.org/IChat/SendResponse")]
        System.Threading.Tasks.Task SendAsync(FormChat.ServiceReferenceChat.Message m);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/MsgHistory", ReplyAction="http://tempuri.org/IChat/MsgHistoryResponse")]
        FormChat.ServiceReferenceChat.Message[] MsgHistory(System.DateTime from, System.DateTime to);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/MsgHistory", ReplyAction="http://tempuri.org/IChat/MsgHistoryResponse")]
        System.Threading.Tasks.Task<FormChat.ServiceReferenceChat.Message[]> MsgHistoryAsync(System.DateTime from, System.DateTime to);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/notify", ReplyAction="http://tempuri.org/IChat/notifyResponse")]
        void notify(FormChat.ServiceReferenceChat.Message m);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatChannel : FormChat.ServiceReferenceChat.IChat, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatClient : System.ServiceModel.DuplexClientBase<FormChat.ServiceReferenceChat.IChat>, FormChat.ServiceReferenceChat.IChat {
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void register(string name) {
            base.Channel.register(name);
        }
        
        public System.Threading.Tasks.Task registerAsync(string name) {
            return base.Channel.registerAsync(name);
        }
        
        public void Send(FormChat.ServiceReferenceChat.Message m) {
            base.Channel.Send(m);
        }
        
        public System.Threading.Tasks.Task SendAsync(FormChat.ServiceReferenceChat.Message m) {
            return base.Channel.SendAsync(m);
        }
        
        public FormChat.ServiceReferenceChat.Message[] MsgHistory(System.DateTime from, System.DateTime to) {
            return base.Channel.MsgHistory(from, to);
        }
        
        public System.Threading.Tasks.Task<FormChat.ServiceReferenceChat.Message[]> MsgHistoryAsync(System.DateTime from, System.DateTime to) {
            return base.Channel.MsgHistoryAsync(from, to);
        }
    }
}
